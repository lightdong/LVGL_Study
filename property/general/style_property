#include "learn.h"
#include "lvgl.h"
#include "stdio.h" //里面有printf这个API

#define SIZE 0
#define POS 0
#define ALIGN_1 0
#define ALIGN_2 0

#define STYLE_1 0
#define STYLE_2 0
#define STYLE_3 0
#define STYLE_4 0
#define STYLE_5 0
#define ZOOM 0

#define BORDER 0
#define PAD 0
#define OUTLINE 0
#define SHADOW 0
#define BG 0
#define OTHER 0
#define PART 0

#define EVENT_1 0
#define EVENT_2 0
#define FLAG 1


lv_obj_t *obj1;
lv_obj_t *obj2;
//lv_obj_t *label1;
int val = 10;

void my_cb(lv_event_t *e);
void my_label(lv_event_t *e);
static void flag_test(lv_event_t *e);

void test_property( ){
#if SIZE/*property : size*/
    lv_obj_t *obj0 = lv_obj_create(lv_scr_act());
    /*size有关的API只有三个*/
    //lv_obj_set_width(obj0,50);//改变宽度
    //lv_obj_set_height(obj0,50);//改变高度
    lv_obj_set_size(obj0,120,120);//改变尺寸,在这个API里面其实是调用的前两个函数

    /*不管是父类还是子类，共用一套API*/
    lv_obj_t *btn0 = lv_btn_create(obj0);
   // lv_obj_set_width(btn0,60);
   // lv_obj_set_height(btn0,60);
    lv_obj_set_size(btn0,80,80);

#endif // 1

#if POS/*property : pos*/
    /*以父类的左上角为基点，向左为x的正方向，向下为y的正方向*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    //lv_obj_set_x(obj1,50);
    //lv_obj_set_y(obj1,50);
    //lv_obj_set_y(obj1,-50);
    lv_obj_set_pos(obj1,50,50);

    lv_obj_t *btn1 = lv_btn_create(obj1);
    lv_obj_set_size(btn1,50,50);
   // lv_obj_set_x(btn1,50);
   // lv_obj_set_y(btn1,50);
   //lv_obj_set_y(btn1,100);
   //lv_obj_set_y(btn1,-50);
   //lv_obj_set_pos(btn1,50,50);

    /*移动为正的话，超出父类的范围的话，会有一个滚动条的效果*/
   lv_obj_set_pos(btn1,100,100);

#endif // 0

#if ALIGN_1 /*property : alignment  (parent)*/
    lv_obj_t *obj2 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj3 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj2,80,80);
    lv_obj_set_size(obj3,80,80);
    lv_obj_set_style_bg_color(obj3,lv_color_hex(0xff0000),0);//将矩形的控形设置为红色的一个API

    lv_obj_set_align(obj2,LV_ALIGN_BOTTOM_MID);
    lv_obj_set_align(obj3,LV_ALIGN_RIGHT_MID);

    lv_obj_t *obj4 = lv_obj_create(obj3);
    lv_obj_set_size(obj4,40,40);
    lv_obj_set_style_pad_left(obj3,0,0);//矩形对象是一个盒子，在四周有海棉体，所以看到的没有完全地紧挨接左面，这个API可以把海棉去除掉
    lv_obj_set_align(obj4,LV_ALIGN_LEFT_MID);

    lv_obj_align(obj4,LV_ALIGN_BOTTOM_MID,40,40);//可以在对齐的基础上进行移动
#endif // 1


#if ALIGN_2/*property : alignment (brother)*/

    /*父子关系的部件对齐的方式有9种，兄弟关系的部件对齐的方式有18种*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj2 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj1);//放到中间看得更清楚一点，不然OUT左边的会没有
    lv_obj_set_size(obj2,60,60);
    //lv_obj_align_to(obj2,obj1,LV_ALIGN_OUT_BOTTOM_RIGHT,0,0);
    //lv_obj_align_to(obj2,obj1,LV_ALIGN_OUT_RIGHT_MID,0,0);
    //lv_obj_align_to(obj2,obj1,LV_ALIGN_OUT_RIGHT_MID,40,0);
    //lv_obj_align_to(obj2,obj1,LV_ALIGN_OUT_LEFT_MID,0,0);
    lv_obj_align_to(obj2,obj1,LV_ALIGN_LEFT_MID,0,0);

#endif // ALIGN_2

/*
修改样式方式一：obj_add_style
               方式二：obj_set_style
方式一的优点是全局存在，可以给不同的部件使用
方式二的优点是可以快速复制大量的相同样式的部件,用方式一的话还要再重新定义一个有关样式的静态变量

一般是两者配合使用，比如说可以obj_set_style后再obj_add_style给覆盖一下

*/
#if STYLE_1/*test_obj_add_style*/
    /*先定义一个静态变量（样式的）并初始化，因为静态变量函数周期内都存在*/
    static lv_style_t style1;
    lv_style_init(&style1);

    /*设置自己想要的样式*/
    lv_style_set_bg_color(&style1,lv_color_hex(0x00ff00));//设置背景颜色,lv_color_hex这个API可以选择RGB888中的哪一个颜色
    //lv_style_set_bg_opa(&style1,LV_OPA_30);//设置背景透明度
    lv_style_set_bg_opa(&style1,LV_OPA_30);

    /*将样式赋给部件，可以添加样式什么时候生效，并且应用到部件中的哪一部分,这里选择应用到默认*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    //lv_obj_add_style(obj1,&style1,LV_STATE_DEFAULT);//default是默认的意思

    lv_obj_add_style(obj1,&style1,LV_STATE_PRESSED);//选择在按下时会改变颜色

    /*部件的删除，删除一般不常用*/
   // lv_obj_remove_style_all(obj1);//这个把整个部件都删除了
    //lv_obj_remove_style(obj1,&style1,LV_STATE_DEFAULT);
   //lv_obj_remove_style(obj1,&style1,LV_OPA_30);

#endif // STYLE_1

#if STYLE_2/*test_obj_set_style*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj2 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj1,60,60);
    lv_obj_set_size(obj2,60,60);
    lv_obj_set_style_bg_color(obj1,lv_color_hex(0x0000ff),LV_STATE_DEFAULT);
    lv_obj_set_style_bg_opa(obj1,LV_OPA_30,LV_STATE_PRESSED);
    lv_obj_set_style_bg_color(obj1,lv_color_hex(0xff00ff),LV_STATE_DEFAULT);

    lv_obj_set_style_bg_opa(obj2,LV_OPA_30,LV_STATE_PRESSED);
    lv_obj_set_style_bg_color(obj2,lv_color_hex(0xff00ff),LV_STATE_DEFAULT);
    lv_obj_set_align(obj2,LV_ALIGN_BOTTOM_MID);


#endif // STYLE_2

#if STYLE_3/*样式的状态之间的关系*/
    lv_obj_t *obj1 = lv_obj_create(lv_scr_act());
    //lv_obj_set_style_bg_color(obj1,lv_color_hex(0x00ffff),LV_STATE_DEFAULT);
    //lv_obj_set_style_bg_color(obj1,lv_color_hex(0x00ffff),LV_STATE_PRESSED);
    lv_obj_set_style_bg_color(obj1,lv_color_hex(0x00ffff),LV_STATE_FOCUSED);//foucsed这种状态，点一下就有，点别出就会没有，可以用鼠标的光标来理解

    /*再添加一个状态有专门的API*/
    lv_obj_add_state(obj1,LV_STATE_PRESSED); //LV_STATE_FOCUSED | LV_STATE_PRESSED

    /*去除一个状态也有专门的API*/
    //另外clean不能取消默认状态因为至少要有一个状态
    lv_obj_clear_state(obj1,LV_STATE_PRESSED);

    /*判断是否有一个状态也有API*/
    //另外API接口非常多可以自己去尝试
    printf("/***STATE***/\n");
    bool ret = lv_obj_has_state(obj1,LV_STATE_FOCUSED);
    if(ret){
        printf("has this state\n");
    }else{
        printf("has not this state\n");
    }
#endif // STYLE_3

#if STYLE_4/*测试大小、位置，对齐等样式属性*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj_2 = lv_obj_create(obj_1);
    lv_obj_set_size(obj_2,30,30);
    lv_obj_set_style_width(obj_1,100,LV_STATE_DEFAULT);
    //lv_obj_set_style_width(obj_1,100,LV_STATE_PRESSED);//可以通过不同的状态进行触发
    lv_obj_set_style_height(obj_1,100,LV_STATE_DEFAULT);

    /*也可以将高度&宽度限定在一定的范围内*/
    /*如何超出了范围的话，只会显示出最大值或最小值的那一个信息*/
    lv_obj_set_style_min_width(obj_1,50,LV_STATE_DEFAULT);
    lv_obj_set_style_max_width(obj_1,200,LV_STATE_DEFAULT);

    /*对于设置样式的对齐与位置的话好像只能是默认的模式*/
    /*而且对齐的话好像只能应用在父子关系之间*/
    lv_obj_set_style_align(obj_2,LV_ALIGN_BOTTOM_MID,LV_STATE_DEFAULT);
   // lv_obj_set_style_align(obj_2,LV_ALIGN_BOTTOM_MID,LV_STATE_PRESSED);
    //lv_obj_set_style_x(obj_2,50,LV_STATE_PRESSED);
    lv_obj_set_style_x(obj_2,-10,LV_STATE_DEFAULT);
#endif // STYLE_4

#if STYLE_5/*变化宽度与高度，x&y变换属性*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    /*transform_height&transform_weight           translate_x&translate_y*/
    //lv_obj_set_style_transform_height(obj_1,20,LV_STATE_DEFAULT);
    /*使用pressed作为状态的话可以看得更加清楚一点*/
    //lv_obj_set_style_transform_height(obj_1,20,LV_STATE_PRESSED);
    //lv_obj_set_style_transform_width(obj_1,20,LV_STATE_PRESSED);
    /*也是一样的道理，可以用pressed看清楚现象*/
    lv_obj_set_style_translate_x(obj_1,20,LV_STATE_PRESSED);
    lv_obj_set_style_translate_y(obj_1,20,LV_STATE_PRESSED);
#endif // STYLE_5

#if ZOOM/*translate_zoom & translate_angle*/
/*目前v8.3版本只有图片控件具有缩放&旋转的功能，下面只是把API接口写下来*/
/*对于缩放，256 ->正常显示，128->一半显示，512->双倍显示*/
/*对于旋转，450 -> 45度，900->90度，150->15度*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    lv_obj_set_style_bg_color(obj_1,lv_color_hex(0xff0000),LV_STATE_DEFAULT|LV_PART_MAIN);
/*不过我发现好像下面两个API没有*/
   // lv_obj_set_style_translate_zoom();
    //lv_obj_set_style_translate_angle();

#endif // ZOOM

#if BORDER/*测试边框相关的API*/
//border_width
//border_color
//border_opa
//border_side
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj_2 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj_1,80,80);
    lv_obj_set_size(obj_2,80,80);
    lv_obj_set_align(obj_1,LV_ALIGN_TOP_MID);
    lv_obj_set_align(obj_2,LV_ALIGN_BOTTOM_MID);
    lv_obj_set_style_border_width(obj_1,20,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_border_color(obj_1,lv_color_make(58,199,131),LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_border_opa(obj_1,LV_OPA_50,LV_STATE_DEFAULT|LV_PART_MAIN);
//lv_border_side_t

//LV_BORDER_SIDE_NONE
//LV_BORDER_SIDE_BOTTOM
//LV_BORDER_SIDE_TOP
//LV_BORDER_SIDE_LEFT
//LV_BORDER_SIDE_RIGHT
//LV_BORDER_SIDE_FULL
//LV_BORDER_SIDE_INTERNAL

    lv_obj_set_style_border_color(obj_2,lv_color_hex(0x00ff00),LV_STATE_DEFAULT|LV_PART_MAIN);
    //lv_obj_set_style_border_side(obj_2,LV_BORDER_SIDE_NONE,LV_STATE_DEFAULT|LV_PART_MAIN);
    //lv_obj_set_style_border_side(obj_2,LV_BORDER_SIDE_BOTTOM,LV_STATE_DEFAULT|LV_PART_MAIN);
   // lv_obj_set_style_border_side(obj_2,LV_BORDER_SIDE_INTERNAL,LV_STATE_DEFAULT|LV_PART_MAIN);
    /*因为使用了掩码的操作，所以可以进行|运算*/
    lv_obj_set_style_border_side(obj_2,LV_BORDER_SIDE_BOTTOM|LV_BORDER_SIDE_LEFT,LV_STATE_DEFAULT|LV_PART_MAIN);


#endif // BORDER


#if PAD/*测试填充物相关的API*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_t *obj_2 = lv_obj_create(obj_1);
    lv_obj_set_size(obj_2,30,30);

    lv_obj_set_style_pad_top(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_pad_left(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);

    lv_obj_set_align(obj_2,LV_ALIGN_BOTTOM_LEFT);
    lv_obj_set_style_pad_bottom(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_align(obj_2,LV_ALIGN_BOTTOM_RIGHT);
    lv_obj_set_style_pad_right(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);

    //lv_obj_set_style_pad_all(obj_1,50,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_pad_all(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);
#endif // PAD

#if OUTLINE/*测试轮廓的相关API*/
//outline_width
//outline_color
//outline_opa
//outline_pad
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    lv_obj_set_style_outline_width(obj_1,20,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_outline_color(obj_1,lv_color_hex(0x00ff00),LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_outline_opa(obj_1,LV_OPA_50,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_outline_pad(obj_1,10,LV_STATE_DEFAULT|LV_PART_MAIN);

#endif // OUTLINE

#if SHADOW/*阴影就像是影子一样，有种渐变色的效果*/
/*要想有shadow的效果，必须要最先设置width*/
//shadow_width
//shadow_color
//shadow_opa
//shadow_ofs_x
//shadow_ofs_y
//shadow_spread
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    lv_obj_set_size(obj_1,100,100);

    lv_obj_set_style_shadow_width(obj_1,20,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_shadow_color(obj_1,lv_color_hex(0x5DE3E0),LV_STATE_DEFAULT|LV_PART_MAIN);
    //lv_obj_set_style_shadow_ofs_x(obj_1,50,LV_STATE_DEFAULT|LV_PART_MAIN);
    //lv_obj_set_style_shadow_ofs_y(obj_1,50,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_shadow_opa(obj_1,LV_OPA_60,LV_STATE_DEFAULT|LV_PART_MAIN);
    //lv_obj_set_style_shadow_spread(obj_1,30,LV_STATE_DEFAULT|LV_PART_MAIN);

#endif // SHADOW


#if BG/*渐变色的设置*/
//bg_color
//bg_opa
/*下面两个是与设置背景颜色的渐变色有关*/
//bg_grad_dir
//bg_grad_main_stop
/*下面两个是与设置渐变色有关*/
//bg_grad_color
//bg_grad_stop

//与方向有关的几个宏定义枚举量
//LV_GRAD_DIR_NONE
//LV_GRAD_DIR_VER   垂直方向渐变，默认从左侧开始（对于背景色，对于渐变色反之）
//LV_GRAD_DIR_HOR   水平方向渐变，默认从上面开始（对于背景色，对于渐变色反之）

    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_set_align(obj_1,LV_ALIGN_TOP_MID);
    lv_obj_set_size(obj_1,80,40);
    lv_obj_set_style_bg_color(obj_1,lv_color_hex(0xff0000),LV_STATE_DEFAULT|LV_PART_MAIN);

    lv_obj_set_style_bg_grad_dir(obj_1,LV_GRAD_DIR_HOR,LV_STATE_DEFAULT|LV_PART_MAIN);
    /*设置渐色的开始位置，0->左侧，128->中间，255->最边，但要注意区别背景色与渐变色的区别*/
    lv_obj_set_style_bg_main_stop(obj_1,128,LV_STATE_DEFAULT|LV_PART_MAIN);

    /*再来一个变量，看一下渐变色的效果*/
    lv_obj_t *obj_2 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj_2,80,40);
    lv_obj_align_to(obj_2,obj_1,LV_ALIGN_OUT_BOTTOM_MID,0,-30);
    lv_obj_center(obj_2);
    lv_obj_set_style_bg_grad_color(obj_2,lv_color_hex(0x00ff00),LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_bg_grad_dir(obj_2,LV_GRAD_DIR_HOR,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_bg_grad_stop(obj_2,128,LV_STATE_DEFAULT|LV_PART_MAIN);

    /*最后来一个总的很漂亮的渐变，把背景与渐变色结合在一起*/
    lv_obj_t *obj_3 = lv_obj_create(lv_scr_act());
    lv_obj_set_align(obj_3,LV_ALIGN_TOP_MID);
    lv_obj_set_size(obj_3,80,40);
    lv_obj_set_align(obj_3,LV_ALIGN_BOTTOM_MID);

    lv_obj_set_style_bg_color(obj_3,lv_color_hex(0xE6FF0C),LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_bg_grad_dir(obj_3,LV_GRAD_DIR_HOR,LV_STATE_DEFAULT|LV_PART_MAIN);

    lv_obj_set_style_bg_grad_color(obj_3,lv_color_hex(0x6FFBFF),LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_bg_grad_dir(obj_3,LV_GRAD_DIR_HOR,LV_STATE_DEFAULT|LV_PART_MAIN);

#endif // BG

#if OTHER/*radius & opa*/
/*radius是弧度的意思，之前创建的部件四周都很圆润,想创建一个直角的*/
/*opa是部件的透明度*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    lv_obj_set_style_radius(obj_1,0,LV_STATE_DEFAULT|LV_PART_MAIN);
    lv_obj_set_style_opa(obj_1,LV_OPA_100,LV_STATE_DEFAULT|LV_PART_MAIN);
#endif // OTHER

#if PART/*部件中的PART*/
    lv_obj_t *slider1 = lv_slider_create(lv_scr_act());
    lv_obj_set_size(slider1,180,20);
    lv_obj_set_align(slider1,LV_ALIGN_CENTER);

   //lv_obj_set_style_bg_color(slider1,lv_color_hex(0x00ffff),LV_STATE_DEFAULT | LV_PART_MAIN);//去单独修改
   //lv_obj_set_style_bg_opa(slider1,LV_OPA_100,LV_STATE_DEFAULT | LV_PART_MAIN);//部件创建时，主体部分有默认的透明 度，可以自己在这里修改

    /*但是下面是没有办法同时修改两个PART的，因为在LVGL中没有使用掩码，0x020000 | 0x030000 = 0x030000所以说只修改了操作句柄的部分*/
   // lv_obj_set_style_bg_color(slider1,lv_color_hex(0x00ffff),LV_STATE_DEFAULT | LV_PART_MAIN|LV_PART_KNOB);//去单独修改
   /*如果想去修改操作句柄，必须再调用一下API*/
   lv_obj_set_style_bg_color(slider1,lv_color_hex(0x00ffff),LV_STATE_DEFAULT | LV_PART_KNOB);
   /*也可以去更改，状态*/
   //lv_obj_set_style_bg_color(slider1,lv_color_hex(0x00ffff),LV_STATE_PRESSED | LV_PART_KNOB);


   /*最后弄一个总的*/
   lv_obj_set_style_bg_color(slider1,lv_color_hex(0xff0000),LV_STATE_DEFAULT | LV_PART_MAIN);
   lv_obj_set_style_bg_opa(slider1,LV_OPA_100,LV_STATE_DEFAULT|LV_PART_MAIN);

   lv_obj_set_style_bg_color(slider1,lv_color_hex(0x00ff00),LV_STATE_DEFAULT | LV_PART_INDICATOR);

   lv_obj_set_style_bg_color(slider1,lv_color_hex(0x0000ff),LV_STATE_DEFAULT | LV_PART_KNOB);

    /*注意或PART的enum时不是掩码v8.3*/
#endif // PART

#if EVENT_1/*测试回调函数，以及对不同事件的响应，并在回调函数中获得哪一个obj触发以及哪一个事件触发*/
    obj1 = lv_obj_create(lv_scr_act());
    obj2 = lv_obj_create(lv_scr_act());
    lv_obj_set_style_bg_color(obj2,lv_color_hex(0x0000ff),LV_STATE_DEFAULT);
    lv_obj_set_size(obj1,60,60);
    lv_obj_set_size(obj2,60,60);

    lv_obj_center(obj1);
    /*可以添加不同的事件，也样式的状态一样，也不能通过或的方式来实现*/
    //LV_EVENT_PRESSED
    //LV_EVENT_PRESSING
    //LV_EVENT_CLICKED
    /*注意传参时要用全局变量，不要使用局部变量*/
    lv_obj_add_event_cb(obj1,my_cb,LV_EVENT_CLICKED,&val);
    //lv_obj_add_event_cb(obj1,my_cb,LV_EVENT_PRESSED,NULL);
    //lv_obj_add_event_cb(obj1,my_cb,LV_EVENT_PRESSING,NULL);

    /*不同的部件可以使用同一个事件影响的回响函数*/
    lv_obj_add_event_cb(obj2,my_cb,LV_EVENT_CLICKED,NULL);

#endif // EVENT

#if EVENT_2/*以一个对象为user_data传入到回调函数中*/
    obj1 = lv_obj_create(lv_scr_act());
    obj2 = lv_obj_create(lv_scr_act());
    lv_obj_set_size(obj2,80,80);
    lv_obj_set_size(obj1,80,80);
    lv_obj_center(obj2);
    lv_obj_t *label1 = lv_label_create(lv_scr_act());
    lv_label_set_text(label1,"hello,world!!!");
    lv_obj_set_align(label1,LV_ALIGN_BOTTOM_LEFT);

    //lv_obj_add_event_cb(obj1,my_label,LV_EVENT_CLICKED,label1);
    lv_obj_add_event_cb(obj2,my_label,LV_EVENT_PRESSED,label1);
    lv_obj_add_event_cb(obj1,my_label,LV_EVENT_PRESSING,label1);


#endif // EVENT_2

#if FLAG/*验证flag的用法*/
    lv_obj_t *obj_1 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_1);
    lv_obj_set_size(obj_1,80,80);
    lv_obj_set_align(obj_1,LV_ALIGN_TOP_MID);
    lv_obj_clear_flag(obj_1,LV_OBJ_FLAG_CLICKABLE);


    lv_obj_t *obj_2 = lv_obj_create(lv_scr_act());
    lv_obj_center(obj_2);
    lv_obj_set_size(obj_2,80,80);
    lv_obj_set_align(obj_2,LV_ALIGN_BOTTOM_MID);
    lv_obj_set_style_bg_color(obj_2,lv_color_hex(0xff0000),LV_STATE_DEFAULT);

    /*obj1 已经没有了响应，但是obj3可以将所接收到的事件传给父类obj1（通过event_bubble）*/
    lv_obj_t *obj_3 = lv_obj_create(obj_1);
    lv_obj_center(obj_3);
    lv_obj_set_size(obj_3,40,40);
    lv_obj_set_style_bg_color(obj_3,lv_color_hex(0x00ff00),LV_STATE_DEFAULT);
    lv_obj_add_flag(obj_3,LV_OBJ_FLAG_EVENT_BUBBLE);


    lv_obj_add_event_cb(obj_1,flag_test,LV_EVENT_PRESSED,obj_2);
    lv_obj_add_event_cb(obj_1,flag_test,LV_EVENT_CLICKED,obj_2);
    /*可以先来看一下效果*/
   // lv_obj_add_flag(obj_1,LV_OBJ_FLAG_HIDDEN);
    //lv_obj_clear_flag(obj_1,LV_OBJ_FLAG_HIDDEN);
    /*通常flag是与事件event一起使用的*/


#endif // FLAG

}



void my_cb(lv_event_t *e){
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    /*如果事件发生后没有参数传递过来，判断一下不去做处理*/
    /*空指针不太好，可能会让程序崩掉*/
    int *temp = (int*)lv_event_get_user_data(e);
    if(temp == NULL){
        printf("wrong argument!!!\n");
        return;
    }
    if(code == LV_EVENT_CLICKED){
        if(target == obj1){
           //temp = *(int*)lv_event_get_user_data(e);
            printf("obj1 has LV_EVENT_CLICKED!!!\n");
            printf("obj1 val is %d\n",*temp);
        }else if(target ==obj2){
             printf("obj2 has LV_EVENT_CLICKED!!!\n");
        }
    }else if(code == LV_EVENT_PRESSED){
        printf("obj1 has LV_EVENT_PRESSED!!!\n");
    }else if(code == LV_EVENT_PRESSING){
        printf("obj1 has LV_EVENT_PRESSING!!!\n");
    }
}

void my_label(lv_event_t *e){
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *temp_obj = lv_event_get_target(e);
    if(temp_obj == NULL){
        printf("target obj pointer is NULL!!!\n");
        return;
    }
    /*虽然label是一个函数内的局部变量，但是对象会存在在堆中（动态分配），可以把地址传递过来*/
    lv_obj_t *temp_lable = (lv_obj_t *)lv_event_get_user_data(e);
    if(temp_lable == NULL){
        printf("user_data pointer is NULL!!!\n");
        return;
    }
    switch (code){
        case LV_EVENT_CLICKED:
            if(temp_obj == obj1)
                lv_label_set_text(temp_lable,"obj1 clicked!!!");
            else if(temp_obj == obj2)
                lv_label_set_text(temp_lable,"obj2 clicked!!!");
            break;
        case LV_EVENT_PRESSED:
            if(temp_obj == obj2)
                lv_label_set_text(temp_lable,"obj2 pressed!!!");
            break;
        case LV_EVENT_PRESSING:
            if(temp_obj == obj1)
                lv_label_set_text(temp_lable,"obj1 pressing!!!");
            break;
        default:
            break;
    }
}

static void flag_test(lv_event_t *e){
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *user_data = (lv_obj_t *)lv_event_get_user_data(e);

    if(code == LV_EVENT_PRESSED){
        lv_obj_add_flag(user_data,LV_OBJ_FLAG_HIDDEN);
    }else if(code == LV_EVENT_CLICKED){
        lv_obj_clear_flag(user_data,LV_OBJ_FLAG_HIDDEN);
    }
}

